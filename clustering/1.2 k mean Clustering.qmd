---
title: "K mean Clustering with image"
subtitle: "with image data"
execute:
  warning: false
  error: false
format:
  html:
    toc: true
    toc-location: right
    code-fold: show
    code-tools: true
    number-sections: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
---

Using K mean Clustering to replace colow on below picture


![](python logo.jpg){width="300"}

# load package

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import numpy as np

import cv2

from siuba.siu import call
from siuba import _, mutate, filter, group_by, summarize,show_query
from siuba import *

```

# data


## input data


```{python}
import numpy as np
from sklearn.cluster import KMeans
from skimage.io import imread, imsave

sample_img = imread('images/python logo.jpg')
w,h,c = sample_img.shape
```

```{python}
w
h
c
```


```{python}
sample_img.shape
```

```{python}
sample_img = sample_img.reshape(w*h,3)
```


```{python}
sample_img.shape
```


```{python}
#test=sample_img.tolist()
#np.unique(test)
```


Data Normalization

Since the dataset contains a range of values from 0 to 255, the dataset has to be normalized. Data Normalization is an important preprocessing step which ensures that each input parameter (pixel, in this case) has a similar data distribution. This fastens the process of covergence while training the model. Also Normalization makes sure no one particular parameter influences the output significantly.


```{python}
x=sample_img/255
```


```{python}
#test=x.tolist()
#np.unique(test)
```



# find the best k group

```{python}
from sklearn.cluster import KMeans
wcss = []
```


```{python}
#Iterating over 1, 2, 3, ---- 10 clusters
for i in range(1, 11): 
    kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter = 100, n_init = 10, random_state = 0)
    kmeans.fit(x)
    wcss.append(kmeans.inertia_) # intertia_ is an attribute that has the wcss number
```
The best K is 3 from the chart
```{python}
plt.plot(range(1,11), wcss)
plt.title("Elbow method applied to find K")
plt.xlabel("number of clusters")
plt.ylabel("wcss")
plt.show()
```

# make picture into 3 colors

```{python}
kmeans = KMeans(n_clusters=3, random_state=0).fit(sample_img)
```


```{python}
# find out which cluster each pixel belongs to.
labels = kmeans.predict(sample_img)
```


```{python}
import collections, numpy
collections.Counter(labels)
```

```{python}
labels.shape
```

```{python}
sample_img.shape
```


```{python}
df1 = pd.DataFrame(sample_img, columns=['Column_A', 'Column_B', 'Column_C'])
```

```{python}
df1.shape
```

```{python}
df1['group_no']=labels
```

```{python}
df1.shape
```


```{python}
#green  RBG code is (0, 255, 0)
#black  RBG code is (0, 0, 0)

df2=df1>> mutate(
                  ############# change group1 to black
                  Column_A=if_else(_.group_no ==0, 0, _.Column_A)
                ,Column_B=if_else(_.group_no ==0, 0, _.Column_B)
                ,Column_C=if_else(_.group_no ==0, 0, _.Column_C)
                    ############# change group2 to green
                )>>mutate(
                Column_A=if_else(_.group_no ==1, 0, _.Column_A)
                ,Column_B=if_else(_.group_no ==1, 255, _.Column_B)
                ,Column_C=if_else(_.group_no ==1, 0, _.Column_C)
                  )>>select(~_.group_no)


```

```{python}
output=df2.to_numpy()
```

```{python}
output.shape
```

```{python}
recolored_img = output.reshape(w,h,3)
```


```{python}
plt.figure()
plt.imshow(recolored_img) 
plt.show()  # display it
```

```{python}
imsave('kmeans_color_q.jpg', recolored_img)
```






```{python}
# the cluster centroids is our color palette
identified_palette = np.array(kmeans.cluster_centers_).astype(int)

# recolor the entire image
recolored_img = np.copy(sample_img)
for index in range(len(recolored_img)):
    recolored_img[index] = identified_palette[labels[index]]
```

```{python}
# reshape for display
recolored_img = recolored_img.reshape(w,h,3)

imsave('kmeans_color_q.jpg', recolored_img)
```





# make picture into 4 colors
```{python}
kmeans = KMeans(n_clusters=4, random_state=0).fit(sample_img)
```


```{python}
# find out which cluster each pixel belongs to.
labels = kmeans.predict(sample_img)
```

```{python}
# the cluster centroids is our color palette
identified_palette = np.array(kmeans.cluster_centers_).astype(int)

# recolor the entire image
recolored_img = np.copy(sample_img)
for index in range(len(recolored_img)):
    recolored_img[index] = identified_palette[labels[index]]
```

```{python}
# reshape for display
recolored_img = recolored_img.reshape(w,h,3)

imsave('kmeans_color_q.jpg', recolored_img)
```

```{python}
plt.figure()
plt.imshow(recolored_img) 
plt.show()  # display it
```



# reference:

https://www.kaggle.com/code/sangwookchn/clustering-techniques-using-scikit-learn

https://muthu.co/reduce-the-number-of-colors-of-an-image-using-k-means-clustering/

# reference:

https://www.kaggle.com/code/sangwookchn/clustering-techniques-using-scikit-learn

https://muthu.co/reduce-the-number-of-colors-of-an-image-using-k-means-clustering/
